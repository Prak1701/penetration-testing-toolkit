import socket
import requests
from scapy.layers.l2 import ARP, Ether  # ✅ Correct
from scapy.sendrecv import srp  # ✅ Needed for network scanning


# Function to scan open ports on a target system
def port_scanner(target_ip, start_port, end_port):
    print(f"🔍 Scanning ports on {target_ip}...")
    for port in range(start_port, end_port + 1):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)  # Set timeout to speed up scanning
        result = sock.connect_ex((target_ip, port))
        if result == 0:
            print(f"✅ Port {port} is open")
        sock.close()

# Function to perform a brute-force login attack (for educational purposes)
def brute_force_login(url, username_list, password_list):
    print(f"🔍 Trying to brute-force login at {url}...")

    for username in username_list:
        for password in password_list:
            data = {"username": username, "password": password}
            response = requests.post(url, data=data)

            print(f"🔹 Trying {username}:{password} → Response Code: {response.status_code}")
            print(f"🔹 Response Text: {response.text}")  # Print actual response

            if "LOGIN_SUCCESS" in response.text:  # Match Flask response
                print(f"✅ Login success with {username}:{password}")
                return

    print("❌ No valid credentials found.")


# Function to scan active devices on a network
def network_scanner(network):
    print(f"🔍 Scanning network {network} for active devices...")
    arp_request = ARP(pdst=network)
    broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    answered_list = srp(arp_request_broadcast, timeout=2, verbose=False)[0]

    print("Active devices:")
    for sent, received in answered_list:
        print(f"✅ {received.psrc} - {received.hwsrc}")

# Main function with a menu
def main():
    while True:
        print("\n🛠️ Penetration Testing Toolkit")
        print("1️⃣ Port Scanner")
        print("2️⃣ Brute-Force Login Tester")
        print("3️⃣ Network Scanner")
        print("4️⃣ Exit")

        choice = input("Enter your choice: ").strip()

        if choice == "1":
            target_ip = input("Enter the target IP: ").strip()
            start_port = int(input("Enter the start port: "))
            end_port = int(input("Enter the end port: "))
            port_scanner(target_ip, start_port, end_port)

        elif choice == "2":
            url = input("Enter the login page URL: ").strip()
            username_list = ["admin", "user", "test"]  # Example usernames
            password_list = ["123456", "password", "admin123"]  # Example passwords
            brute_force_login(url, username_list, password_list)

        elif choice == "3":
            network = input("Enter the network range (e.g., 192.168.1.0/24): ").strip()
            network_scanner(network)

        elif choice == "4":
            print("🚪 Exiting the program...")
            break

        else:
            print("❌ Invalid choice! Please select a valid option.")

if __name__ == "__main__":
    main()
